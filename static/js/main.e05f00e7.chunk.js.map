{"version":3,"sources":["context.js","Components/Contact.js","Components/Contacts.js","Components/Header.js","Components/TextInputGroup.js","Components/AddContact.js","Components/EditContact.js","Components/About.js","Components/NotFound.js","App.js","reportWebVitals.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","axios","get","res","this","data","value","props","children","Component","Consumer","Contact","showContactInfo","onDeleteClick","a","delete","name","email","phone","className","style","width","fontWeight","onClick","cursor","bind","float","color","to","marginRight","Contacts","Fragment","Header","heading","href","defaultProps","TextInputGroup","label","placeholder","onChange","error","htmlFor","classnames","AddContact","errors","onSubmit","e","preventDefault","newContact","post","history","push","target","EditContact","updContact","match","params","put","About","NotFound","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e05f00e7.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport axios from \"axios\"\r\n\r\nconst Context = React.createContext();\r\n\r\n//The context acts like a store but in store; the actions, reducers and combine reducres are in different files, while the contaxt is a mini store, it houses both the state, the reducers and the dispatch and inside dispatch, we pass the action to be carried out\r\n\r\n\r\n//reducer send the data based on the action received\r\nconst reducer = (state, action)=>{\r\n    switch(action.type) {\r\n        case 'DELETE_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.filter(contact=>contact.id !==action.payload)\r\n            }\r\n        case 'ADD_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: [...state.contacts, action.payload]\r\n            }\r\n        case 'UPDATE_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.map(contact=>contact.id === action.payload.id ? (contact=action.payload):contact\r\n                )\r\n            }\r\n         default:\r\n        return state;\r\n    }\r\n    \r\n}\r\n//we use provider here so it can accomodate the state and it can be used anywhere\r\nexport class Provider extends Component {\r\n\r\n    state ={\r\n        contacts: [\r\n            \r\n        ],\r\n\r\n        dispatch: action => this.setState(state =>reducer(state,action))\r\n    };\r\n\r\n    async componentDidMount(){\r\n      const res = await axios.get(\"http://jsonplaceholder.typicode.com/users\")\r\n      this.setState({contacts: res.data })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* we use value here to hold the state, so anywhere we want to use the state, we just call value */}\r\n                <Context.Provider value= {this.state}>\r\n                    {this.props.children}\r\n                </Context.Provider>  \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport const Consumer = Context.Consumer;\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Consumer} from '../context'\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nclass Contact extends Component {\r\n//this state is for toggle the contact details and it is in the contact.js and not contacts.js cos it is being done individually to one contact likewise the DELETE_CONTACT\r\n    state= {\r\n     showContactInfo: false,     \r\n    };\r\n\r\n    onDeleteClick= async (id, dispatch)=>{\r\n        await axios.delete(`http://jsonplaceholder.typicode.com/users/${id}`)\r\n        dispatch({type:'DELETE_CONTACT', payload:id})  \r\n    }\r\n    \r\n    render() {\r\n        //here we destructured the id,email and no from contact and we are usin props here because the state has been moved to a different page\r\n        const {id, name, email, phone} = this.props.contact;\r\n        const { showContactInfo } = this.state;\r\n        return (\r\n            //using consumer here because we want to access the context.js which acts like the store for our app\r\n            <Consumer>\r\n                {/* we used value here because it's the variable housing the state */}\r\n                {value =>{\r\n                    const {dispatch} = value;\r\n                    return(\r\n                        <div className=\"card card-body mb-3\" style={{ width: '25rem' }}>\r\n                            <h4 style={{ fontWeight: 'bold' }}>{name}<i onClick={()=>this.setState({showContactInfo:!this.state.showContactInfo})} className=\"fas fa-sort-down\" style={{ cursor: 'pointer' }}></i><i onClick={this.onDeleteClick.bind(this, id, dispatch)}className=\"fas fa-times\" style={{ cursor: 'pointer',float:\"right\", color:\"red\"}}></i>\r\n                            <Link to= {`/contact/edit/${id}`}><i className=\"fas fa-pencil-alt\"style={{ cursor:\"pointer\", float:'right', color:'black', marginRight:\"1rem\" }}></i></Link>\r\n                            </h4>\r\n                            {showContactInfo?(<ul className=\"list-group\">\r\n                                <li className=\"list-group-item\">Email: {email}</li>\r\n                                <li className=\"list-group-item\">Phone: {phone}</li>\r\n                            </ul>):null}\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>   \r\n        )\r\n    }\r\n}\r\n\r\nContact.propTypes = {\r\n    contact: PropTypes.object.isRequired,\r\n    \r\n}\r\nexport default Contact;","import React, { Component } from 'react'\r\nimport Contact from './Contact'\r\nimport { Consumer } from \"../context\"\r\n\r\n class Contacts extends Component {\r\n \r\n\r\n    // deleteContact=(id)=>{\r\n    //     const { contacts } = this.state;\r\n\r\n    //     const newContact = contacts.filter(contact => contact.id !== id);\r\n\r\n    //     this.setState({\r\n    //         contacts: newContact\r\n    //     })\r\n    // }\r\n\r\n    render() {\r\n        return(\r\n            //we have to call in the consumer here so we can access data from the contaxt.js and the valuse passed in is the parameter holding the {this.state} so with it, we can access the state from here\r\n            <Consumer>\r\n                {value => {\r\n                    //destructuring contacts from value which in this cas is the state\r\n                    const {contacts} = value;\r\n                    return(\r\n                        //React.fragment is used when you dont want unneceesary divs\r\n                        <React.Fragment>\r\n                        <h1 className=\"display-4 mb-3\"><span className=\"text-danger\">Contact</span> List</h1>\r\n                        {contacts.map(contact=>(\r\n                            <Contact key={contact.id}  contact={contact}/>\r\n                        ))}\r\n                        {/* deleteClickHandler = {this.deleteContact.bind(this, contact.id)} */}\r\n                    </React.Fragment>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n    }\r\n}\r\nexport default Contacts;","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Link} from \"react-router-dom\"\r\n\r\n\r\nconst Header = (props) => {\r\n    const {heading} = props;\r\n    return (\r\n      <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\r\n          <div className=\"container\">\r\n            <a href=\"/\" className=\"navabr-brand text-white\">{heading}</a>\r\n            <div>\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                    <li className=\"nav-item\">\r\n                        <Link to=\"/\" className=\"nav-link\">Home</Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <Link to=\"/about\" className=\"nav-link\">About</Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <Link to=\"/contact/add\" className=\"nav-link\">Add</Link>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n          </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nHeader.defaultProps = {\r\n    heading: \"My App\"\r\n\r\n}\r\n\r\nHeader.propTypes = {\r\n    heading: PropTypes.string.isRequired\r\n}\r\nexport default Header;","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classnames from 'classnames'\r\n\r\n//trying to create a template to be used instead \r\n const TextInputGroup = ({\r\n     label,\r\n     name,\r\n     value,\r\n     placeholder,\r\n     type,\r\n     onChange,\r\n     error\r\n }) => {\r\n    return (\r\n        <div className=\"form-group\">\r\n            <label htmlFor={name}>{label}</label>\r\n            <input type={type} \r\n            name={name} \r\n            className={classnames(\"form-control\", {\"is-invalid\":error})}\r\n            placeholder={placeholder} \r\n            value={value} \r\n            onChange={onChange}/>\r\n\r\n            {error && <div className=\"invalid-feedback\">{error}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nTextInputGroup.propTypes ={\r\n    label: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    error: PropTypes.string\r\n}\r\n\r\nTextInputGroup.defaultProps = {\r\n    type: 'text'\r\n}\r\nexport default TextInputGroup;","import React, { Component } from 'react'\r\nimport {Consumer} from \"../context\"\r\nimport TextInputGroup from '../Components/TextInputGroup'\r\nimport axios from 'axios'\r\n\r\n\r\nclass AddContact extends Component {\r\n\r\n    state = {\r\n        name: \"\",\r\n        email:\"\",\r\n        phone:\"\",\r\n        errors:{}\r\n\r\n    }\r\n\r\n    onSubmit =async(dispatch, e) => {\r\n        e.preventDefault();\r\n        const {name, email, phone}= this.state;\r\n\r\n\r\n        //check for errors\r\n        if(name === '') {\r\n            this.setState({\r\n                errors: {name: 'Name is required'}\r\n            })\r\n            return;\r\n        }\r\n        if(email === '') {\r\n            this.setState({\r\n                errors: {email: 'Email is required'}\r\n            })\r\n            return;\r\n        }\r\n        if(phone === '') {\r\n            this.setState({\r\n                errors: {phone: 'Phone is required'}\r\n            })\r\n            return;\r\n        }\r\n\r\n\r\n        const newContact = {\r\n            name,\r\n            email,\r\n            phone\r\n        }\r\n\r\n        const res = await axios.post('http://jsonplaceholder.typicode.com/users', newContact)\r\n        dispatch({type:\"ADD_CONTACT\", payload:res.data})\r\n\r\n        //return the state to default after submitting\r\n        this.setState({\r\n            name:'',\r\n            email:'',\r\n            phone:'',\r\n            errors:{}\r\n        })\r\n        this.props.history.push('/')\r\n    };\r\n    onChange = (e) => this.setState({[e.target.name]: e.target.value})\r\n\r\n\r\n    render() {\r\n        const {name, email, phone, errors} = this.state;\r\n\r\n            return(\r\n            <Consumer>\r\n                {value => {\r\n                const {dispatch}= value;\r\n                return(\r\n                    <div className=\"card\" style={{width:'25rem'}}>\r\n                        <div className=\"card-header\">Add Contact</div>\r\n                        <div className=\"card-body\">\r\n                            <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                                <TextInputGroup\r\n                                    label=\"Name\"\r\n                                    name=\"name\"\r\n                                    placeholder = \"Enter Name\"\r\n                                    value={name}\r\n                                    onChange= {this.onChange}\r\n                                    error={errors.name}\r\n                                />\r\n                                <TextInputGroup\r\n                                    label=\"Email\"\r\n                                    name=\"email\"\r\n                                    type=\"email\"\r\n                                    placeholder = \"Enter Email\"\r\n                                    value={email}\r\n                                    onChange= {this.onChange}\r\n                                    error={errors.email}\r\n                                />\r\n                                <TextInputGroup\r\n                                    label=\"Phone\"\r\n                                    name=\"phone\"\r\n                                    placeholder = \"Enter Phone\"\r\n                                    value={phone}\r\n                                    onChange= {this.onChange}\r\n                                    error={errors.phone}\r\n                                />\r\n                                {/* This is the standard way of using a form field if you don't want to use a dry code, */}\r\n                                {/* <div className=\"form-group\">\r\n                                    <label htmlFor=\"name\">Name:</label>\r\n                                    <input type=\"text\" className=\"form-control\" name=\"name\" placeholder=\"Enter Name...\" value={name} onChange={this.onChange} />\r\n                                </div>\r\n                                {/* <div className=\"form-group\">\r\n                                    <label htmlFor=\"name\">Email:</label>\r\n                                    <input type=\"text\" className=\"form-control\" name=\"email\" placeholder=\"Enter Email...\" value={email} onChange={this.onChange} />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"name\">Phone:</label>\r\n                                    <input type=\"text\" className=\"form-control\" name=\"phone\" placeholder=\"Enter Phone No....\" value={phone} onChange={this.onChange}/>\r\n                                </div> */}\r\n                                <input type=\"submit\" value=\"Add Contact\" className=\"btn btn-primary btn-block\" />\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                ) \r\n                }}\r\n            </Consumer>\r\n            )\r\n    }\r\n}\r\n\r\nexport default AddContact;","import React, { Component } from 'react'\r\nimport {Consumer} from \"../context\"\r\nimport TextInputGroup from '../Components/TextInputGroup'\r\nimport axios from 'axios'\r\n\r\n\r\nclass EditContact extends Component {\r\n\r\n    state = {\r\n        name: \"\",\r\n        email:\"\",\r\n        phone:\"\",\r\n        errors:{}\r\n\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const {id} = this.props.match.params;\r\n        const res = await axios.get(`http://jsonplaceholder.typicode.com/users/${id}`)\r\n        const contact = res.data;\r\n        this.setState({\r\n            name: contact.name,\r\n            email:contact.email,\r\n            phone:contact.phone\r\n        })\r\n    }\r\n\r\n    onSubmit =async(dispatch, e) => {\r\n        e.preventDefault();\r\n        const {name, email, phone}= this.state;\r\n\r\n\r\n        //check for errors\r\n        if(name === '') {\r\n            this.setState({\r\n                errors: {name: 'Name is required'}\r\n            })\r\n            return;\r\n        }\r\n        if(email === '') {\r\n            this.setState({\r\n                errors: {email: 'Email is required'}\r\n            })\r\n            return;\r\n        }\r\n        if(phone === '') {\r\n            this.setState({\r\n                errors: {phone: 'Phone is required'}\r\n            })\r\n            return;\r\n        }\r\n\r\n        const updContact = {\r\n            name,\r\n            email,\r\n            phone\r\n        }\r\n\r\n        const {id } = this.props.match.params;\r\n        const res = await axios.put(`http://jsonplaceholder.typicode.com/users/${id}`, updContact);\r\n        dispatch({type:\"UPDATE_CONTACT\", payload: res.data});\r\n\r\n        //return the state to default after submitting\r\n        this.setState({\r\n            name:'',\r\n            email:'',\r\n            phone:'',\r\n            errors:{}\r\n        })\r\n        this.props.history.push('/')\r\n    };\r\n    onChange = (e) => this.setState({[e.target.name]: e.target.value})\r\n\r\n\r\n    render() {\r\n        const {name, email, phone, errors} = this.state;\r\n\r\n            return(\r\n            <Consumer>\r\n                {value => {\r\n                const {dispatch}= value;\r\n                return(\r\n                    <div className=\"card\" style={{width:'25rem'}}>\r\n                        <div className=\"card-header\">Edit Contact</div>\r\n                        <div className=\"card-body\">\r\n                            <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                                {/* this is the dry code,ie if you dont want to use the form part */}\r\n                                <TextInputGroup\r\n                                    label=\"Name\"\r\n                                    name=\"name\"\r\n                                    placeholder = \"Enter Name\"\r\n                                    value={name}\r\n                                    onChange= {this.onChange}\r\n                                    error={errors.name}\r\n                                />\r\n                                <TextInputGroup\r\n                                    label=\"Email\"\r\n                                    name=\"email\"\r\n                                    type=\"email\"\r\n                                    placeholder = \"Enter Email\"\r\n                                    value={email}\r\n                                    onChange= {this.onChange}\r\n                                    error={errors.email}\r\n                                />\r\n                                <TextInputGroup\r\n                                    label=\"Phone\"\r\n                                    name=\"phone\"\r\n                                    placeholder = \"Enter Phone\"\r\n                                    value={phone}\r\n                                    onChange= {this.onChange}\r\n                                    error={errors.phone}\r\n                                />\r\n                                {/* This is the standard way of using a form field if you don't want to use a dry code, */}\r\n                                {/* <div className=\"form-group\">\r\n                                    <label htmlFor=\"name\">Name:</label>\r\n                                    <input type=\"text\" className=\"form-control\" name=\"name\" placeholder=\"Enter Name...\" value={name} onChange={this.onChange} />\r\n                                </div>\r\n                                {/* <div className=\"form-group\">\r\n                                    <label htmlFor=\"name\">Email:</label>\r\n                                    <input type=\"text\" className=\"form-control\" name=\"email\" placeholder=\"Enter Email...\" value={email} onChange={this.onChange} />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"name\">Phone:</label>\r\n                                    <input type=\"text\" className=\"form-control\" name=\"phone\" placeholder=\"Enter Phone No....\" value={phone} onChange={this.onChange}/>\r\n                                </div> */}\r\n                                <input type=\"submit\" value=\"Update Contact\" className=\"btn btn-primary btn-block\" />\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                ) \r\n                }}\r\n            </Consumer>\r\n            )\r\n    }\r\n}\r\n\r\nexport default EditContact;","import React from 'react'\r\n\r\nfunction About() {\r\n    return (\r\n        <div>\r\n           <h1 className=\"display-4\">About Contact Manager</h1> \r\n           <p className=\"lead\">Simple app to manage Contacts</p>\r\n        </div>\r\n    )\r\n}\r\nexport default About;","import React from 'react'\r\n\r\n function NotFound() {\r\n    return (\r\n        <div>\r\n            <h1 className='display-4'>404 Page not found</h1>\r\n            <p className=\"lead\">Sorry, the page does not seem to exist</p>\r\n        </div>\r\n    )\r\n}\r\nexport default NotFound;","import React, {Component} from 'react'\nimport {HashRouter as Router, Route, Switch} from \"react-router-dom\"\nimport Contacts from './Components/Contacts'\nimport Header from './Components/Header'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Provider } from \"./context\";\nimport AddContact from \"./Components/AddContact\"\nimport EditContact from \"./Components/EditContact\"\nimport About from \"./Components/About\"\nimport NotFound from \"./Components/NotFound\"\n\n//had to change the browserRouter to hashrouter beacsue of problem navigating the pages or route using browserRouter with github pages\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider>\n        <Router>\n        <div className= \"App\">\n          <Header heading = \"Contact Manager\"/>\n          <div className=\"container\">\n            <Switch>\n              <Route exact path= \"/\" component={Contacts} />\n              <Route exact path= \"/about\" component={About} />\n              <Route  exact path= \"/contact/add\" component={AddContact} />\n              <Route  exact path= \"/contact/edit/:id\" component={EditContact} />\n              <Route Component={NotFound} />\n            </Switch>\n          </div>\n        </div>\n        </Router>\n      </Provider>\n    )\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}